// Code generated by MockGen. DO NOT EDIT.
// Source: synapsis/proto-definitions/inventory (interfaces: InventoryServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	inventory "synapsis/proto-definitions/inventory"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInventoryServiceClient is a mock of InventoryServiceClient interface.
type MockInventoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceClientMockRecorder
}

func (m *MockInventoryServiceClient) InventoryConnection() inventory.InventoryServiceClient {
	return m
}

// MockInventoryServiceClientMockRecorder is the mock recorder for MockInventoryServiceClient.
type MockInventoryServiceClientMockRecorder struct {
	mock *MockInventoryServiceClient
}

// NewMockInventoryServiceClient creates a new mock instance.
func NewMockInventoryServiceClient(ctrl *gomock.Controller) *MockInventoryServiceClient {
	mock := &MockInventoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceClient) EXPECT() *MockInventoryServiceClientMockRecorder {
	return m.recorder
}

// CheckStock mocks base method.
func (m *MockInventoryServiceClient) CheckStock(arg0 context.Context, arg1 *inventory.CheckStockRequest, arg2 ...grpc.CallOption) (*inventory.CheckStockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckStock", varargs...)
	ret0, _ := ret[0].(*inventory.CheckStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStock indicates an expected call of CheckStock.
func (mr *MockInventoryServiceClientMockRecorder) CheckStock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStock", reflect.TypeOf((*MockInventoryServiceClient)(nil).CheckStock), varargs...)
}

// ReleaseStock mocks base method.
func (m *MockInventoryServiceClient) ReleaseStock(arg0 context.Context, arg1 *inventory.ReleaseStockRequest, arg2 ...grpc.CallOption) (*inventory.ReleaseStockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseStock", varargs...)
	ret0, _ := ret[0].(*inventory.ReleaseStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseStock indicates an expected call of ReleaseStock.
func (mr *MockInventoryServiceClientMockRecorder) ReleaseStock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStock", reflect.TypeOf((*MockInventoryServiceClient)(nil).ReleaseStock), varargs...)
}

// ReserveStock mocks base method.
func (m *MockInventoryServiceClient) ReserveStock(arg0 context.Context, arg1 *inventory.ReserveStockRequest, arg2 ...grpc.CallOption) (*inventory.ReserveStockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReserveStock", varargs...)
	ret0, _ := ret[0].(*inventory.ReserveStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveStock indicates an expected call of ReserveStock.
func (mr *MockInventoryServiceClientMockRecorder) ReserveStock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveStock", reflect.TypeOf((*MockInventoryServiceClient)(nil).ReserveStock), varargs...)
}
